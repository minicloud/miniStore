var util         = require('util');
var EventEmitter = require('events').EventEmitter;
var url          = require("url");
var formidable   = require('formidable');
function MiniHttp(appConfig,req,res,logger){ 
	EventEmitter.call(this); 
	this.req = req;
	this.res = res;
	this.logger = logger;
	//网页文件上传涉及到跨域处理
	res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type'); 
    res.setHeader('Access-Control-Allow-Credentials', true);
	if(req.method=="OPTIONS") {
		res.statusCode = 200;
		res.end();
		return;
	}
	this.appConfig = appConfig;
	var params = {};
	var queryParams = url.parse(req.url, true).query; 
	for (var key in queryParams) {
		if(queryParams.hasOwnProperty(key)){
			params[key] = decodeURIComponent(queryParams[key]);
		}
    };
    //解析form表单提交的数据，包括：文件流
	//form的数据自动覆盖url的参数 
	var form = new formidable.IncomingForm();
    form.maxFieldsSize = 1024 * 1024 * 1024;
    form.hash = "sha1";
    var self = this;
    //获取fields与文件同时提交过来的参数 
    form.parse(req, function(err, fields, files) { 
    	for (var key in fields) {
    		if(fields.hasOwnProperty(key)){
    			params[key] = decodeURIComponent(fields[key]);
    		}
    	}
    	self.files = files;
    	self.params = params;
		self.emit('request', params,files); 
    });
} 
exports.MiniHttp = MiniHttp;
util.inherits(MiniHttp, EventEmitter);
/**
* 解析request是否是是IE浏览器
*/
MiniHttp.prototype.isIE=function(){
	var agent = this.req.headers["user-agent"]; 
	if (typeof(agent)!='undefined' && agent.indexOf("Trident")>0) { 
		return true;
	}
	return false;
}
/**
* 解析url地址里面包含的业务参数
*/
MiniHttp.prototype.queryParam=function(key,defaultValue){
	var value = this.params[key]; 
	if((typeof value)!='undefined'){
		return value;
	}
	return defaultValue;
} 
/**
* sendfile模式下载文件
* @param string nginxPath nginx的sendfilePath
* @param string mimeType 文件的mimeType
* @param boolean forceDownload 在浏览器模式下文件下载分为强制附件模式或浏览器直接打开
* 
**/
MiniHttp.prototype.xsendFile=function(nginxPath,fileName,mimeType,forceDownload){
	var options = {
		  'X-Accel-Redirect': nginxPath,
		  'Content-Type': mimeType,
	};
	var disposition = "attachment";
	if(!forceDownload){
		disposition = "inline";
	}
	var encodeFileName = encodeURIComponent(fileName);  
	if(this.isIE()){
		options["Content-Disposition"] = disposition+'; filename="' + encodeFileName + '"' ;
	}else{
		options["Content-Disposition"] = disposition+'; filename="' + fileName + '"' ;
	} 
	this.logger.info({"send file:":options});
	this.res.writeHead(200,options); 
	this.res.end();
} 
/**
* 向url发送请求，Post参数来自params
**/
MiniHttp.prototype.createRequest=function(url,params,successCallback,errorCallback){
	//把url的参数与params合并
	var newUrl = url;
	var pos = url.indexOf("?");
	if(pos>=0){
		newUrl = url.substring(0,pos);
	} 
	var urlInfo = require('url').parse(newUrl);
	var newParams = {};
	var queryParams = require('url').parse(url, true).query; 
	for (var key in queryParams) {
		if(queryParams.hasOwnProperty(key)){
			newParams[key] = queryParams[key];
		}
    };
    for (var key in params) {
		if(params.hasOwnProperty(key)){
			newParams[key] = params[key];
		}
    };
    //向目标服务器Post数据
	var postData = require('querystring').stringify(newParams);
	var protocol = {
	    "http:":require('http'),
	    "https:":require('https')
	};
	var httpOptions = {
	    host:urlInfo.hostname,
	    port:urlInfo.port,
	    method:'POST',
	    path:urlInfo.path,
	    headers:{
	        'User-Agent':'Mozilla/5.0 (Windows NT 6.2; WOW64) miniClient/1.0.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36',
	        'Content-Type': 'application/x-www-form-urlencoded',
	        'Content-Length': postData.length
	    }
	}; 
	var self = this; 
	var postRequest = protocol[urlInfo.protocol].request(httpOptions, function(subres) {
	    subres.setEncoding('utf8');
	    var chunks = "";
	    subres.on('data', function (chunk) {
	        //异步方式返回值
	        chunks+=chunk;
	    });
	    subres.on('end',function(){
	        if(subres.statusCode!=200){
				self.logger.error({"web upload callback error:":subres.statusMessage});
	            errorCallback(subres.statusMessage);
	        }else{
	        	self.logger.info({"web upload callback info:":chunks.toString()});
	            successCallback(JSON.parse(chunks.toString()));
	        }
	    });
	});
	postRequest.write(postData);
	postRequest.end();
}
/**
* 输出请求
*/
MiniHttp.prototype.response=function(responseData){
	var code = responseData.code;
	var data = responseData.data;
	if(code==200){
		this.logger.info({"response:":responseData});
	}else{
		this.logger.error({"response:":responseData});
	}
	this.res.statusCode = code;
	this.res.setHeader("Content-Type", "application/json");
	this.res.end(JSON.stringify(data));
} 