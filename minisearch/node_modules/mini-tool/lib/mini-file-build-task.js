
var crc           = require('crc') 
var util          = require('util'); 
var EventEmitter  = require('events').EventEmitter; 
var MiniFileUtils = require('./mini-file-utils').MiniFileUtils;
var miniFileUtils = new MiniFileUtils(); 
var fs            = require("fs");
var http          = require("http");

http.globalAgent.maxSockets=500;

function MiniFileBuildTask(miniHttp,client,config,logger,DocumentDB){
	EventEmitter.call(this);  
	var self          = this;
	this.logger       = logger;
	this.downloadUrl  = miniHttp.queryParam("download_url","");
	this.callbackUrl  = miniHttp.queryParam("callback_url","");
	var siteId  	  = miniHttp.queryParam("site_id","");
	this.siteId       = crc.crc32(siteId).toString();
	this.signature    = miniHttp.queryParam("signature",""); 
	this.txtFilePath  = miniFileUtils.getFileContentPath(config.txt_save_path,this.signature);
	this.DocumentDB   = DocumentDB; 
	//把文件写入到数据库中，并向迷你云报俊  
	this.insertDB(function(err){
		var success = false;
		if(err==null){ 
			success = true;
        }
        self.report(success,function(){
        	//发送任务接受成功请求
			var data = {
					"status":0
			}; 
        	if(success){
        		data.status = 1;
        	}
        	var responseData = {
				code:200,
				data:data
			};				
			miniHttp.response(responseData);
        });     
		
	});
	
} 
exports.MiniFileBuildTask = MiniFileBuildTask;
util.inherits(MiniFileBuildTask, EventEmitter);
//向迷你云报俊
MiniFileBuildTask.prototype.report = function(success,callback){
	var self = this;
	if(success){
		var url  = this.callbackUrl; 
	    this.logger.info({"report":url}); 
		http.get(url, function(res) {
			if(res.statusCode!=200){
				self.logger.error({"url":url,"code":res.statusCode,"msg":res.statusMessage});
			}else{ 
				self.logger.info({"url":url,"code":res.statusCode}); 
			}			
			callback();
		});
	}	
}
//插入到数据库表中
MiniFileBuildTask.prototype.insertDB = function(callback){
	var self = this; 
	self.download(function(success,content){
		if(success){ 
			//查询是否在DB中存在记录，避免多次建立索引
			self.DocumentDB.exists({ site_id: self.siteId,signature:self.signature}, function (err, exists) {
	            if(!exists){
	            	//把文本内容存储到数据库中 
	            	self.DocumentDB.create([
				        {
				            site_id: self.siteId,
				            content:content,
				            signature:self.signature
				        } 
				    ], function (err, items) {  
				    	if(err==null){
				    		//把文本内容本地存储，便于形成摘要信息
							var folderPath = require('path').dirname(self.txtFilePath);
						    if(!fs.existsSync(folderPath)){
							    //创建存储文本文件路径
							    var mkdirp = require('mkdirp');
							    mkdirp.sync(folderPath);
						    }  		    
							fs.writeFileSync(self.txtFilePath,content);
				    	}	        
				        callback(err);		        
				    }); 
	            }else{
	            	//数据库已经存在，不用二次新加记录并建立索引
	            	callback(null);	
	            }
	        });
			
		}else{
			callback(false);
		}		
	})
}
//下载文件
MiniFileBuildTask.prototype.download = function(callback){
	var self = this;  
	var getTextContent = function(res){
		var content = "";
	    res.on("data",function(chunk){
	    	content += chunk.toString();
	    });
		res.on('end', function () { 
			callback(true,content);
		});	
	}	 
	try{
		http.get(self.downloadUrl, function(res) {
			if(res.statusCode==200){
				getTextContent(res);
			}else if(res.statusCode==301){
				//支持迷你存储
				var url = res.headers.location;
				http.get(url, function(res) {
					if(res.statusCode==200){
						getTextContent(res);
					}else{
						self.logger.error({"url":url,"msg":res.statusMessage});
						callback(false); 
					} 
				});
			}else{
				self.logger.error({"url":self.downloadUrl,"msg":res.statusMessage}); 
				callback(false);
			}
		});
	}catch(error){
		self.logger.error({"downloadUrl":self.downloadUrl,"error":error});
		callback(false);	 
	}
}

