var util         = require('util');
var EventEmitter = require('events').EventEmitter;
var fs           = require("fs");
var http         = require("http");
var path         = require("path");
var exec         = require('child_process').exec;
var MiniFileUtils = require('./mini-file-utils').MiniFileUtils;
var miniFileUtils = new MiniFileUtils(); 

http.globalAgent.maxSockets=500;
function MiniFileConvert(client,config,logger,task,callback){

	EventEmitter.call(this); 
	this.config       = config;
	var docNodeName   = config.name; 
	this.hKey          = docNodeName+"_convertList";  
	this.client        = client;
	this.nextCallback  = callback;
	this.logger        = logger;
	this.mimeType      = task.mimeType;
	this.signature     = task.signature;
	this.downloadUrl   = task.downloadUrl;
	this.callbackUrl   = task.callbackUrl;
	this.outFolderPath = miniFileUtils.getFileContentFolder(config.path,this.signature);//输出内容所在目录
	this.cacheFilePath = path.join(config.cache_path, this.signature);//原文件下载后的路径
	this.pdfPath       = path.join(this.outFolderPath, (this.signature + '.pdf'));//pdf所在位置
	this.txtPath       = path.join(this.outFolderPath, (this.signature + '.txt'));//文本文件所在位置 
	this.pngPath       = path.join(this.outFolderPath, (this.signature + '.png')); //封面所在位置
};
exports.MiniFileConvert = MiniFileConvert;
util.inherits(MiniFileConvert, EventEmitter);
//提取文件封面
MiniFileConvert.prototype.fileCover = function(callback){
	var self = this;
	//图片已经存在就不用转换了
	if(fs.existsSync(self.pngPath)){
		callback(true); 
		return;
	}
	var command = 'gs -sDEVICE=pngalpha -dLastPage=1 -o '; 
	command = command+" "+self.pngPath+" "+self.pdfPath;
    this.logger.info(command);
	var coverCommand = exec(command, function (error, stdout, stderr) {
		 self.logger.error({command:command,stderr:stderr});
	});
	coverCommand.on("close",function(code,signal){ 
		//文档转换成功
		if(fs.existsSync(self.pngPath)){
			callback(true); 
		}else{ 
			callback(false);
		}
	});
}
//提取文件文本内容
MiniFileConvert.prototype.fileTxt = function(callback){
	var self = this;
	//文档已经转换成功
	if(fs.existsSync(self.txtPath)){
		callback(true);
		return;
	}
	var command = 'pdftotext -raw ';
	command = command+" "+self.pdfPath+" "+self.txtPath;
    this.logger.info(command);
	var txtCommand = exec(command, function (error, stdout, stderr) {
		self.logger.error({command:command,stderr:stderr});
	});
	txtCommand.on("close",function(code,signal){
		//文档转换成功
		if(fs.existsSync(self.txtPath)){
			callback(true);
		}else{ 
			callback(false);
		}
	});
}
//提取pdf内容
MiniFileConvert.prototype.filePdf = function(callback){
	var self = this;
	//如PDF文件存在就不用二次转换了
	if(fs.existsSync(self.pdfPath)){ 
		if(fs.existsSync(self.cacheFilePath)){
        	fs.unlinkSync(self.cacheFilePath);
    	}
		callback(true);
		return;
	}
    //默认转换office最多60秒，超时时间
	var timeout = this.config.convert_pdf_timeout;
	if(typeof(timeout)=="undefined"){
		timeout = 60000;//转换为毫秒
	}else{
		timeout *= 1000;//转换为毫秒
	}
	//把ppt/doc/excel转为pdf
	var command = 'libreoffice --headless --convert-to pdf --outdir ';
	command = command+" "+this.outFolderPath+" "+this.cacheFilePath;
	self.logger.info(command);
	var pdfCommand = exec(command, {timeout:timeout},function (error, stdout, stderr) {
		self.logger.error({command:command,stderr:stderr});
	}); 
	pdfCommand.on("close",function(code,signal){
		//如pdf文件存在，则文档转换成功
		if(fs.existsSync(self.pdfPath)){ 
			if(fs.existsSync(self.cacheFilePath)){
            	fs.unlinkSync(self.cacheFilePath);
        	}
			callback(true);
		}else{
			callback(false);
		} 		
	});
} 
//向迷你云报告状态
MiniFileConvert.prototype.report = function(success){
	var self = this;
	var url  = this.callbackUrl+"&status=1";
	if(!success){ 
		url = this.callbackUrl+"&status=0";
		//把临时文件夹删除
		miniFileUtils.cleanEmptyFolder(self.outFolderPath);
	}
    this.logger.info({"report":url});
	http.get(url, function(res) {
		if(res.statusCode!=200){
			self.logger.error({"url":url,"code":res.statusCode,"msg":res.statusMessage});
		}else{ 
			self.logger.info({"url":url,"code":res.statusCode}); 
		}
		//执行下一个任务
		self.client.brpop(self.hKey, 0, self.nextCallback);
	});
}
//转换文档
MiniFileConvert.prototype.run = function(res){
	var self = this; 
	var mimeType = this.mimeType;
    var writeFile  = fs.createWriteStream(this.cacheFilePath, {'flags': 'w'});
	res.pipe(writeFile);
	res.on('end', function () { 
		//创建输出目录
		if(!fs.existsSync(self.outFolderPath)){
		    //创建存储路径
		    var mkdirp = require('mkdirp');
		    mkdirp.sync(self.outFolderPath);
		}
		//为pdf提取内容
		if(mimeType=="application/pdf"){
			//文件上传结束，把临时文件重新命名为正式文件
		    //tmp存储路径与目标存储目录可能不在同一分区，采用renameSync会出现错误
		    var readStream = fs.createReadStream(self.cacheFilePath)
	      	var writeFile  = fs.createWriteStream(self.pdfPath);
	        readStream.pipe(writeFile);
	        readStream.on("end",function(){
	        	if(fs.existsSync(self.cacheFilePath)){
	            	fs.unlinkSync(self.cacheFilePath);
	        	}
	            //文件提取首页图片
				self.fileCover(function(success){
					if(success){
						//文件提取文本文件
						self.fileTxt(function(success){
							//报俊失败或成功
							self.report(success);
						});
					}else{
						//报俊失败
						self.report(success);
					}
					
				});
	        }); 
			
		}else if(mimeType ==  'application/msword' || mimeType == 'application/mspowerpoint' ||mimeType == 'application/msexcel') {
			//为doc/ppt/excle提取内容
			//文档提取pdf
			self.filePdf(function(success){
				if(success){
					//文件提取首页图片
					self.fileCover(function(success){
						if(success){
							//文件提取文本文件
							self.fileTxt(function(success){
								//报俊失败或成功
								self.report(success);
							});
						}else{
							//报俊失败
							self.report(success);
						}
						
					});
				}else{
					//报俊失败
					self.report(success);
				}
				
			});   
		}
		
	});
}
//转换文件
MiniFileConvert.prototype.convert = function(){
	var self = this;
	if(fs.existsSync(self.pngPath)){
		self.report(true);
	}
	try{
		var req = http.get(self.downloadUrl, function(res) {
			if(res.statusCode==200){
				self.run(res);
			}else if(res.statusCode==301){
				//支持迷你存储
				var url = res.headers.location;
				http.get(url, function(res) {
					if(res.statusCode==200){
						self.run(res);
					}else{
						self.logger.error({"url":url,"msg":res.statusMessage});
						self.report(false);
					} 
				});
			}else{
				self.logger.error({"url":self.downloadUrl,"msg":res.statusMessage});
				self.report(false);
			}
		});
		req.on('error', function(e) {
		  	self.logger.error({"url":self.downloadUrl,"error":e});
			self.report(false);
		});
	}catch(e){
		self.logger.error({"url":self.downloadUrl,"error":e});
		self.report(false);
	}
	
}  
