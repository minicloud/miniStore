var util = require('util');
var EventEmitter = require('events').EventEmitter; 
var MiniFileUtils = require('./mini-file-utils').MiniFileUtils;
var miniFileUtils = new MiniFileUtils(); 
var fs = require('fs');
var qs = require('querystring');
var S = require("string");
function MiniFileBlockUpload(miniHttp){
	EventEmitter.call(this);
	this.logger        = miniHttp.logger;
	var self           = this;
	var size           = parseInt(miniHttp.queryParam("size",0)); 
	//把新上传的文件块异步写入cache文件中，并修改break_meta内容
	var signature      = miniHttp.queryParam("signature","");
	var pathList       = miniHttp.appConfig.path; 
	var cacheFilePath  = miniFileUtils.getCacheFileContentPath(pathList,signature,size);
    //创建父亲目录
    var folderPath     = require('path').dirname(cacheFilePath);
    if(!fs.existsSync(folderPath)){
	    //创建存储路径
	    var mkdirp     = require('mkdirp');
	    mkdirp.sync(folderPath);
    }
    var blockPath      = miniHttp.files.file.path; 
  	var readStream     = fs.createReadStream(blockPath);
    var writeFile      = fs.createWriteStream(cacheFilePath, {'flags': 'a',encoding:'binary'});
    readStream.pipe(writeFile);
    readStream.on("end",function(){
    	//把临时文件删除
    	fs.unlinkSync(blockPath);
		var stats = fs.statSync(cacheFilePath); 
		if(stats.size==size){
			//文件上传结束，把临时文件重新命名为正式文件
			miniFileUtils.cache2Normal(cacheFilePath);
			//向迷你云发送文件上传成功信息，并转发迷你云的返回值
			var callbackUrl = miniHttp.queryParam("callback","");
			var pos = callbackUrl.indexOf("?");
			var hostUrl = callbackUrl.substring(0,pos);
            var params = qs.parse(callbackUrl.substring(pos+1,callbackUrl.length));
            var encode = params["encode"];
            if(encode="base64"){
            	//base64转码
            	var decodeParams = {};
            	for(var name in params){
            		if(name!=="encode"){
            			var value = params[name];
            			value = new Buffer(value, 'base64').toString();
            			value = miniHttp.decode(value);
            			value = S(value).replaceAll("+"," ").s;
            			decodeParams[name] = value;
            		}
            	}
            	params = decodeParams;
            }
			var successCallback = function(data){
				var responseData = {
					code:200,
					data:data
				};				
				miniHttp.response(responseData);
			};
			var errorCallback = function(data){
				var responseData = {
					code:401,
					data:data
				};				
				miniHttp.response(responseData);
			}; 
			miniHttp.createRequest(hostUrl,params,successCallback,errorCallback);
		}else{
			self.logger.info("new file size:"+stats.size+" ori file size:"+size); 
			var responseData = {
				code:200,
				data:{"status":1}
			};				
			miniHttp.response(responseData);
		}
    }); 
	
} 
exports.MiniFileBlockUpload = MiniFileBlockUpload;
util.inherits(MiniFileBlockUpload, EventEmitter);
