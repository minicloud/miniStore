var util         = require('util');
var http         = require("http");
var EventEmitter = require('events').EventEmitter; 

String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g, '');};
function getDisk(subPath,callback){
  require('child_process').exec('df -k '+subPath, function(err, resp) 
  {
    var info = resp.toString();
    var pos1 = info.indexOf("/");
    var pos2 = info.indexOf(" ",pos1);
    var diskPath =  info.substring(pos1,pos2-1);
    var pathInfo =  info.substring(pos2,info.length);
    var items = pathInfo.trim().split(" ");  
    callback(subPath,diskPath,items[1],items[0]); 
  }); 
}
/**
* 获得磁盘使用情况
* 默认为"/usr/local/miniyun"所在磁盘的使用情况
* 否则为其它子目录所在磁盘的使用情况
*/
function getUsedSize(callback){
  var fs = require("fs");
  var defaultPaths=["/usr/local/miniyun/miniStore/data/a/","/usr/local/miniyun/miniStore/data/b/","/usr/local/miniyun/miniStore/data/c/"];
  var paths = [];
  for(var i=0;i<defaultPaths.length;i++){
    var subPath = defaultPaths[i];
    if(fs.existsSync(subPath)){
      paths.push(subPath);
    }
  }
  if(paths.length==0){
    paths.push("/usr/local/miniyun");
  } 
  var hash  = {};
  var disks = []
  var k=0;
  (function next(){
    if(k>=paths.length){ 
      callback(disks);
      return;  
    };  
    var subPath = paths[k]; 
    getDisk(subPath,function(subPath,diskPath,usedSize,totalSize){
      var existed = false;
      for(var p=0;p<disks.length;p++){
        var diskInfo = disks[p]; 
        if(diskInfo["path"]==diskPath){
          existed = true;
          break;
        }
      }
      if(!existed){
        disks.push({"path":diskPath,"used":parseInt(usedSize),"total":parseInt(totalSize)}); 
      }      
      k++;
      next();
    });
  })();
}

function MiniNodeInfo(miniHttp){
	EventEmitter.call(this);
	this.logger = miniHttp.logger;
	var self = this;
	getUsedSize(function(disks){
		var data = {
				"status":1
		}; 
		var responseData = {
			code:200,
			data:disks
		};				
		miniHttp.response(responseData);
	})

	
		
} 
exports.MiniNodeInfo = MiniNodeInfo;
util.inherits(MiniNodeInfo, EventEmitter);